version: '3.4'

services:
  seq:
    image: datalust/seq:latest
    deploy:
      resources:
        limits:
          memory: 14G
        reservations:
          memory: 14G
    environment:
      - ACCEPT_EULA=Y
    labels:
      - traefik.backend=seq
      - traefik.docker.network=web
      - traefik.port=80

  redis:
    image: "redis:alpine"
    hostname: redisstate
    ports:
      - "6379:6379"

  redisCommander:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOSTS=local:redisstate:6379
    ports:
      - '8082:8081'

  # mongo:
  #   image: mongo
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: mongorootpwd

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: mongorootpwd
  #     ME_CONFIG_MONGODB_URL: mongodb://root:mongorootpwd@mongo:27017/

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
  
  warehousemanagement-customers:
    image: ${DOCKER_REGISTRY-}warehousemanagementcustomers
    build:
      context: .
      dockerfile: WarehouseManagement.Customers/Dockerfile
  
  warehousemanagement-customers-sidecar:
    image: "daprio/daprd:latest"
    command: [ "./daprd", 
    "-app-id", "warehousemanagement-customers", 
    "-app-port", "80", 
    "-components-path", "/components", 
    "-log-level", "debug"]
    volumes:
      - "./dapr/customer/:/components"
    depends_on:
      - warehousemanagement-customers
    network_mode: "service:warehousemanagement-customers"

  warehousemanagement-inventory:
    image: ${DOCKER_REGISTRY-}warehousemanagementinventory
    build:
      context: .
      dockerfile: WarehouseManagement.Inventory/Dockerfile

  warehousemanagement-inventory-sidecar:
    image: "daprio/daprd:latest"
    command: [ "./daprd", 
    "-app-id", "warehousemanagement-inventory", 
    "-app-port", "80", 
    "-components-path", "/components", 
    "-log-level", "debug"]
    volumes:
      - "./dapr/inventory/:/components"
    depends_on:
      - warehousemanagement-inventory
    network_mode: "service:warehousemanagement-inventory"

  warehousemanagement-orders:
    image: ${DOCKER_REGISTRY-}warehousemanagementorders
    build:
      context: .
      dockerfile: WarehouseManagement.Orders/Dockerfile

  warehousemanagement-orders-sidecar:
    image: "daprio/daprd:latest"
    command: [ "./daprd", 
    "-app-id", "warehousemanagement-orders", 
    "-app-port", "80", 
    "-components-path", "/components", 
    "-log-level", "debug"]
    volumes:
      - "./dapr/order/:/components"
    depends_on:
      - warehousemanagement-orders
    network_mode: "service:warehousemanagement-orders"

  warehousemanagement-ui:
    image: ${DOCKER_REGISTRY-}warehousemanagementui
    build:
      context: .
      dockerfile: WarehouseManagement.UI/Dockerfile

  warehousemanagement-ui-sidecar:
    image: "daprio/daprd:latest"
    command: [ "./daprd", 
    "-app-id", "warehousemanagement-ui", 
    "-app-port", "80", 
    "-components-path", "/components", 
    "-log-level", "debug"]
    volumes:
      - "./dapr/web/:/components"
    depends_on:
      - warehousemanagement-ui
    network_mode: "service:warehousemanagement-ui"

